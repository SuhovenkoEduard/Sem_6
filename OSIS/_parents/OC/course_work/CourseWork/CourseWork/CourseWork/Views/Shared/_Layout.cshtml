<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Surface Builder</title>

    <environment include="Development">
        <link rel="stylesheet" href="~/css/main.css" />
        <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
        <link rel="shortcut icon" type="image/png" href="~/favicon.ico">
    </environment>
</head>
<body>
    @RenderBody()

    <partial name="_CookieConsentPartial" />

    <environment include="Development">
        <script src="~/js/site.js" asp-append-version="true"></script>
        <script src="~/js/view.js"></script>
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/js/plotly-latest.min.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/site.min.js" asp-append-version="true"></script>
        <script src="~/js/plotly-latest.min.js"></script>
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
    </environment>

    <script>
        let calcButton = document.getElementById('calc-button');

        calcButton.addEventListener("click", _ => {
            if (errors.x === false && errors.y === false && errors.step === false) {
                let data = getData();

                calcButton.disabled = true;
                graphicStub.style.visibility = 'visible';
                barChartStub.style.visibility = 'visible';

                document.getElementById('graphic-loading-span').innerHTML = 'Calculating...';
                document.getElementById('bar-loading-span').innerHTML = 'Calculating...';

                jump('surface');

                new Promise((resolve, reject) => {
                    $.ajax({
                        url: '@Url.Action("GetPoints", "Home")',
                        data: {
                            xSt: data.xSt,
                            xFin: data.xFin,
                            ySt: data.ySt,
                            yFin: data.yFin,
                            step: data.step
                        },
                        success: response => {
                            if (response.status) {
                                let pointForPlot = distributePoints(response.result, data.xSt, data.xFin, data.ySt, data.yFin);
                                drawSurface(pointForPlot);

                                resolve();
                            }
                            else {
                                reject(response.msg);
                            }
                        },
                        error: _ => reject()
                    });
                }).then(_ => {
                    $.ajax({
                        url: '@Url.Action("GetSurfaceArea", "Home")',

                        data: {
                            xSt: data.xSt,
                            xFin: data.xFin,
                            ySt: data.ySt,
                            yFin: data.yFin,
                            step: data.step
                        },
                        success: response => {
                            debugger;
                            if (response.status) {
                                drawBarChart(response.result);

                                document.querySelector('#area').innerHTML = response.result[0].surfaceArea;
                                document.querySelector('#fault').innerHTML = Math.abs(
                                    response.result[0].surfaceArea / (8.169 * 10 ** 30)
                                ).toFixed(3);
                            }
                            else {
                                throw Exception(response.msg);
                            }
                        }
                });
                }).catch(err => console.log(err));

                setTimeout(function () {
                    calcButton.disabled = false;
                    graphicStub.style.visibility = 'hidden';
                    barChartStub.style.visibility = 'hidden';
                }, 2000);
            } else {
                graphicStub.style.visibility = 'visible';
                barChartStub.style.visibility = 'visible';
                document.getElementById('graphic-loading-span').innerHTML = 'Waiting for data entry...';
                document.getElementById('bar-loading-span').innerHTML = 'Waiting for data entry...';
            }

            
        });

        function distributePoints(points, xSt, xFin, ySt, yFin) {
            let xArr = [];
            let yArr = [];
            let zArr = [];

            for (let x = xSt; x <= xFin; x++) {
                xArr.push(x);
            }

            for (let y = ySt; y <= yFin; y++) {
                yArr.push(y);
            }

            for (let x = 0, index = 0; x < xArr.length; x++) {
                let row = [];

                for (let y = 0; y < yArr.length; y++, index++) {
                    row.push(points[index].z);
                }

                zArr.push(row);
            }

            return { x: xArr, y: yArr, z: zArr };
        }

        function drawSurface(points)
        {
            let x = points.x;
            let y = points.y;
            let z = points.z;

            let data = [{
                x: x,
                y: y,
                z: z,
                type: 'surface',
                "showscale": false,
                "colorscale": [
                    [
                        0,
                        "#ff9800"
                    ],
                    [
                        1,
                        "#ff9800"
                    ]
                ],
                "autocolorscale": false,
                autosize: true
            }];

            let layout = {
                font: {
                    size: 14,
                    color: 'rgb(24, 40, 64)',
                    family: 'Raleway'
                },
                autosize: true,
                margin: {
                    l: 0,
                    r: 0,
                    t: 0,
                    b: 40
                },
                scene: {
                    camera: {
                        eye: {
                            x: 1.5,
                            y: 1.5,
                            z: 0.1
                        }
                    }
                }
            };

            setTimeout(function () {
                Plotly.newPlot('graphic', data, layout);
            }, 1000)
        }

        function drawBarChart(results)
        {
            let threads = [];
            let timings = [];
            let areas = [];

            for (let i = 0; i < results.length; i++) {
                threads.push(results[i].threadsCount);
                timings.push(results[i].time);
                areas.push(results[i].surfaceArea);
            }

            debugger;

            let data = [
                {
                    x: threads,
                    y: timings,
                    text: timings,
                    textposition: 'auto',
                    type: 'bar',
                    mode: 'markers',
                    hoverinfo: 'y',
                    marker: {
                        color: '#ff9800',
                        line: {
                            width: 1,
                            color: '#444'
                        }
                    },
                    autosize: true
                }
            ];

            var layout = {
                font: {
                    size: 18,
                    color: 'rgb(24, 40, 64)',
                    family: 'Raleway'
                },
                autosize: true,
                margin: {
                    l: 80,
                    r: 40,
                    t: 40,
                    b: 40
                },
                xaxis: {
                    dtick: 1
                },
                yaxis: {
                    title: {
                        text: 'msec'
                    }
                }
            };

            Plotly.newPlot('bar-chart', data, layout);
        }
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
